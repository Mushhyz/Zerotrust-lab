#!/bin/bash

set -e

# Colors
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

echo -e "${YELLOW}üöÄ D√©ploiement de l'environnement Zero Trust (approche en 3 phases)${NC}"

# V√©rifications pr√©liminaires
echo -e "${YELLOW}üîç V√©rifications pr√©liminaires...${NC}"

# V√©rifier kubectl
if ! command -v kubectl &> /dev/null; then
    echo -e "${RED}‚ùå kubectl n'est pas install√©${NC}"
    echo -e "${YELLOW}üí° Ex√©cutez: ./install-prerequisites.sh${NC}"
    exit 1
fi

# V√©rifier la configuration kubectl
if [ ! -f ~/.kube/config ]; then
    echo -e "${RED}‚ùå Configuration kubectl manquante${NC}"
    echo -e "${YELLOW}üí° Ex√©cutez d'abord: ./install-prerequisites.sh${NC}"
    exit 1
fi

# V√©rifier l'acc√®s au cluster
if ! kubectl cluster-info &> /dev/null; then
    echo -e "${RED}‚ùå Impossible d'acc√©der au cluster Kubernetes${NC}"
    echo -e "${YELLOW}üí° Tentative de correction automatique...${NC}"
    
    if [ -f "./fix-kubectl.sh" ]; then
        chmod +x fix-kubectl.sh
        ./fix-kubectl.sh
    else
        echo -e "${YELLOW}üí° V√©rifications sugg√©r√©es:${NC}"
        echo "  - Docker fonctionne: docker ps"
        echo "  - Cluster kind existe: kind get clusters"
        echo "  - Reconfigurez kubectl: kind export kubeconfig"
        exit 1
    fi
fi

# Attendre que le cluster soit compl√®tement pr√™t
echo -e "${YELLOW}‚è≥ V√©rification que le cluster est pr√™t...${NC}"

# V√©rifier que les pods DNS sont pr√™ts
echo "  Attente des pods DNS..."
if ! kubectl wait --for=condition=ready pod -l k8s-app=kube-dns -n kube-system --timeout=120s 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è Les pods DNS prennent du temps, continuons...${NC}"
fi

# V√©rifier que l'ingress controller est pr√™t
echo "  Attente de l'ingress controller..."
if ! kubectl wait --namespace ingress-nginx --for=condition=ready pod --selector=app.kubernetes.io/component=controller --timeout=180s 2>/dev/null; then
    echo -e "${YELLOW}‚ö†Ô∏è L'ingress controller prend du temps, continuons...${NC}"
    # V√©rifier l'√©tat des pods ingress
    kubectl get pods -n ingress-nginx 2>/dev/null || true
fi

echo -e "${GREEN}‚úÖ V√©rifications pr√©liminaires r√©ussies${NC}"

# V√©rifier Terraform
if ! command -v terraform &> /dev/null; then
    echo -e "${RED}‚ùå terraform n'est pas install√©${NC}"
    echo -e "${YELLOW}üí° Ex√©cutez: ./install-prerequisites.sh${NC}"
    exit 1
fi

echo "üîß Initialisation de Terraform..."
cd terraform
terraform init

echo "üì¶ Phase 1: D√©ploiement de Gatekeeper (OPA) en priorit√©..."
# D√©ployer uniquement OPA en premier
if ! terraform apply -target=helm_release.opa -auto-approve; then
    echo -e "${RED}‚ùå √âchec du d√©ploiement de Gatekeeper${NC}"
    exit 1
fi

echo "‚è≥ Attente que Gatekeeper soit compl√®tement op√©rationnel..."
echo "  Phase 1a: V√©rification du deployment controller-manager..."
if ! kubectl rollout status deployment/gatekeeper-controller-manager -n opa --timeout=300s; then
    echo -e "${YELLOW}‚ö†Ô∏è Timeout pour controller-manager, v√©rification manuelle...${NC}"
    kubectl get pods -n opa
fi

echo "  Phase 1b: V√©rification du deployment audit..."
if ! kubectl rollout status deployment/gatekeeper-audit -n opa --timeout=180s; then
    echo -e "${YELLOW}‚ö†Ô∏è Timeout pour audit, v√©rification manuelle...${NC}"
    kubectl get pods -n opa
fi

echo "  Phase 1c: Attente que les webhooks soient pr√™ts (60s)..."
sleep 60

echo "  Phase 1d: V√©rification des pods Gatekeeper:"
kubectl get pods -n opa

echo "  Phase 1e: V√©rification que les ValidatingAdmissionWebhooks sont pr√™ts..."
if kubectl get validatingadmissionwebhook gatekeeper-validating-webhook-configuration &>/dev/null; then
    echo "    ‚úÖ ValidatingAdmissionWebhook configur√©"
else
    echo "    ‚ö†Ô∏è ValidatingAdmissionWebhook pas encore pr√™t, attente suppl√©mentaire..."
    sleep 30
fi

echo "üì¶ Phase 2: D√©ploiement des ConstraintTemplates de base en priorit√©..."
echo "  Application des ConstraintTemplates de base via Terraform..."
if ! terraform apply -target=kubernetes_manifest.constrainttemplate_privileged -target=kubernetes_manifest.constrainttemplate_hostnetwork -target=kubernetes_manifest.constrainttemplate_latest_tag -target=kubernetes_manifest.constrainttemplate_resources -auto-approve; then
    echo -e "${YELLOW}‚ö†Ô∏è Probl√®me avec les ConstraintTemplates de base, application manuelle...${NC}"
    
    # Application manuelle des templates de base
    echo "  Application manuelle des ConstraintTemplates de base..."
    kubectl apply -f ../opa/constraints/constrainttemplate-privileged.yaml || echo "    Failed: privileged"
    kubectl apply -f ../opa/constraints/constrainttemplate-hostnetwork.yaml || echo "    Failed: hostnetwork"
    kubectl apply -f ../opa/constraints/constrainttemplate-latest-tag.yaml || echo "    Failed: latest-tag"
    kubectl apply -f ../opa/constraints/constrainttemplate-resources.yaml || echo "    Failed: resources"
    
    echo "  Attente que les ConstraintTemplates de base s'√©tablissent (60s)..."
    sleep 60
fi

echo "üì¶ Phase 2b: D√©ploiement des ConstraintTemplates avanc√©s..."
echo "  Attente suppl√©mentaire pour stabilit√© des templates de base (30s)..."
sleep 30

if ! terraform apply -target=kubernetes_manifest.constrainttemplate_hostpath -target=kubernetes_manifest.constrainttemplate_seccomp -target=kubernetes_manifest.constrainttemplate_image_digest -auto-approve; then
    echo -e "${YELLOW}‚ö†Ô∏è Probl√®me avec les ConstraintTemplates avanc√©s, tentative de r√©cup√©ration...${NC}"
    echo "  V√©rification de l'√©tat de Gatekeeper..."
    kubectl get pods -n opa
    kubectl get constrainttemplate
    
    echo "  Nouvelle tentative apr√®s attente (60s)..."
    sleep 60
    
    if ! terraform apply -target=kubernetes_manifest.constrainttemplate_hostpath -target=kubernetes_manifest.constrainttemplate_seccomp -target=kubernetes_manifest.constrainttemplate_image_digest -auto-approve; then
        echo -e "${RED}‚ùå √âchec persistant des ConstraintTemplates avanc√©s${NC}"
        echo -e "${YELLOW}üí° Continuons avec les templates de base seulement${NC}"
    fi
fi

echo "‚è≥ Phase 2c: Attente que tous les ConstraintTemplates s'√©tablissent (90s)..."
sleep 90

echo "  V√©rification des ConstraintTemplates cr√©√©s:"
kubectl get constrainttemplate --no-headers | awk '{print "    - " $1}'

echo "üì¶ Phase 3: D√©ploiement des Constraints de base..."
echo "  Application des Constraints de base via Terraform..."
if ! terraform apply -target=kubernetes_manifest.constraint_deny_privileged -target=kubernetes_manifest.constraint_deny_hostnetwork -target=kubernetes_manifest.constraint_deny_latest_tag -target=kubernetes_manifest.constraint_require_resources -auto-approve; then
    echo -e "${YELLOW}‚ö†Ô∏è Probl√®me avec les Constraints de base, application manuelle...${NC}"
    
    # Application manuelle des constraints de base
    echo "  Application manuelle des Constraints de base..."
    kubectl apply -f ../opa/constraints/constraint-deny-privileged.yaml || echo "    Failed: deny-privileged"
    kubectl apply -f ../opa/constraints/constraint-deny-hostnetwork.yaml || echo "    Failed: deny-hostnetwork"
    kubectl apply -f ../opa/constraints/constraint-deny-latest-tag.yaml || echo "    Failed: deny-latest-tag"
    kubectl apply -f ../opa/constraints/constraint-require-resources.yaml || echo "    Failed: require-resources"
fi

echo "üì¶ Phase 4: D√©ploiement des autres services..."
if ! terraform apply -auto-approve; then
    echo -e "${RED}‚ùå √âchec du d√©ploiement des services${NC}"
    echo -e "${YELLOW}üí° Informations de diagnostic:${NC}"
    echo "  √âtat des ConstraintTemplates:"
    kubectl get constrainttemplate
    echo ""
    echo "  √âtat des Constraints:"
    kubectl get constraints --all-namespaces
    echo ""
    echo -e "${YELLOW}üí° Solutions possibles:${NC}"
    echo "  - Attendre quelques minutes et r√©essayer: make deploy"
    echo "  - Nettoyer et red√©ployer: make reset && make deploy"
    echo "  - D√©ployer uniquement les politiques de base: make deploy-opa-basic"
    echo "  - V√©rifier l'√©tat de Gatekeeper: kubectl logs -n opa deployment/gatekeeper-controller-manager"
    exit 1
fi

echo "‚è≥ Attente du d√©marrage des services..."
echo "  Phase 1: Attente des pods critiques (30s)..."
sleep 30

# V√©rifier que les pods critiques d√©marrent
echo "  Phase 2: V√©rification des pods par namespace..."
for ns in auth vault gitea opa monitoring logging; do
    if kubectl get namespace "$ns" &>/dev/null; then
        echo "    Namespace $ns:"
        kubectl get pods -n "$ns" --no-headers 2>/dev/null | head -2 || echo "      Aucun pod trouv√©"
    fi
done

echo "  Phase 3: Attente suppl√©mentaire (30s)..."
sleep 30

echo "üåê Application des manifests Ingress..."
cd ..

# Appliquer les ingress un par un avec v√©rification
for ingress_file in ingress-*.yaml; do
    if [ -f "$ingress_file" ]; then
        echo "  Applying $ingress_file..."
        kubectl apply -f "$ingress_file" || {
            echo -e "${YELLOW}‚ö†Ô∏è √âchec de l'application de $ingress_file, continuons...${NC}"
        }
    fi
done

echo "üõ°Ô∏è Application des politiques OPA Gatekeeper..."
if [ -d "opa/constraints" ]; then
    # Attendre que Gatekeeper soit pr√™t
    echo "  Attente que Gatekeeper soit pr√™t..."
    timeout 120 bash -c 'until kubectl get deployment gatekeeper-controller-manager -n opa &>/dev/null; do sleep 10; done' || {
        echo -e "${YELLOW}‚ö†Ô∏è Gatekeeper prend du temps √† d√©marrer${NC}"
    }
    
    # Attendre que les webhooks soient pr√™ts
    sleep 30
    
    # Appliquer les constraint templates d'abord
    for template_file in opa/constraints/constrainttemplate-*.yaml; do
        if [ -f "$template_file" ]; then
            echo "  Applying template: $(basename $template_file)"
            kubectl apply -f "$template_file" || {
                echo -e "${YELLOW}‚ö†Ô∏è √âchec de l'application de $template_file${NC}"
            }
        fi
    done
    
    # Appliquer les templates avanc√©s depuis GitOps
    if [ -d "gitops/opa/constraints/advanced-constraints" ]; then
        echo "  üîÑ Les contraintes avanc√©es sont maintenant g√©r√©es par Terraform..."
        echo "  ‚ÑπÔ∏è  V√©rification que Terraform les a d√©ploy√©es..."
        
        # V√©rifier que les ConstraintTemplates avanc√©s sont d√©ploy√©s
        advanced_templates=("k8spsphostpath" "k8srequireseccomp" "k8srequireimagedigest")
        for template in "${advanced_templates[@]}"; do
            if kubectl get constrainttemplate "$template" &>/dev/null; then
                echo "    ‚úÖ ConstraintTemplate $template trouv√©"
            else
                echo "    ‚ö†Ô∏è  ConstraintTemplate $template manquant - application manuelle..."
                template_file="gitops/opa/constraints/advanced-constraints/constrainttemplate-${template#k8s}.yaml"
                if [ -f "$template_file" ]; then
                    kubectl apply -f "$template_file" || {
                        echo -e "${YELLOW}‚ö†Ô∏è √âchec de l'application de $template_file${NC}"
                    }
                fi
            fi
        done
        
        # V√©rifier que les Constraints avanc√©es sont d√©ploy√©es
        advanced_constraints=("deny-hostpath-volumes" "require-seccomp-runtime-default" "require-image-digest")
        for constraint in "${advanced_constraints[@]}"; do
            if kubectl get constraints --all-namespaces | grep -q "$constraint"; then
                echo "    ‚úÖ Constraint $constraint trouv√©"
            else
                echo "    ‚ö†Ô∏è  Constraint $constraint manquant - application manuelle..."
                constraint_file="gitops/opa/constraints/advanced-constraints/constraint-${constraint#*-}.yaml"
                if [ -f "$constraint_file" ]; then
                    kubectl apply -f "$constraint_file" || {
                        echo -e "${YELLOW}‚ö†Ô∏è √âchec de l'application de $constraint_file${NC}"
                    }
                fi
            fi
        done
    else
        echo "  ‚ö†Ô∏è  R√©pertoire des contraintes avanc√©es non trouv√©"
        echo "  üí° Cr√©ez d'abord les contraintes avanc√©es avec:"
        echo "      mkdir -p gitops/opa/constraints/advanced-constraints"
    fi
    
    # Attendre que les templates soient install√©s
    sleep 15
    
    # Puis appliquer les constraints
    for constraint_file in opa/constraints/constraint-*.yaml; do
        if [ -f "$constraint_file" ]; then
            echo "  Applying constraint: $(basename $constraint_file)"
            kubectl apply -f "$constraint_file" || {
                echo -e "${YELLOW}‚ö†Ô∏è √âchec de l'application de $constraint_file${NC}"
            }
        fi
    done
    
    # Appliquer les constraints avanc√©es depuis GitOps
    if [ -d "gitops/opa/constraints/advanced-constraints" ]; then
        echo "  Applying advanced constraints from GitOps..."
        for constraint_file in gitops/opa/constraints/advanced-constraints/constraint-*.yaml; do
            if [ -f "$constraint_file" ]; then
                echo "    Applying advanced constraint: $(basename $constraint_file)"
                kubectl apply -f "$constraint_file" || {
                    echo -e "${YELLOW}‚ö†Ô∏è √âchec de l'application de $constraint_file${NC}"
                }
            fi
        done
    fi
    
    # D√©ployer l'application Argo CD pour les contraintes avanc√©es
    echo "üöÄ Configuration de la synchronisation Argo CD pour les contraintes avanc√©es..."
    if [ -f "gitops/base/argo-root-app.yaml" ]; then
        echo "  üìã Application de l'application Argo CD root..."
        kubectl apply -f gitops/base/argo-root-app.yaml || {
            echo -e "${YELLOW}‚ö†Ô∏è Argo CD non disponible ou application d√©j√† existante${NC}"
        }
        
        # Attendre la synchronisation
        echo "  ‚è≥ Attente de la synchronisation Argo CD (30s)..."
        sleep 30
        
        # V√©rifier le statut de l'application
        if kubectl get application opa-advanced -n argocd &>/dev/null; then
            echo "  ‚úÖ Application opa-advanced cr√©√©e avec succ√®s"
            app_status=$(kubectl get application opa-advanced -n argocd -o jsonpath='{.status.sync.status}' 2>/dev/null || echo "Status indisponible")
            echo "  üìä Statut de synchronisation: $app_status"
        else
            echo "  ‚ÑπÔ∏è  Application opa-advanced sera g√©r√©e par Terraform"
        fi
    else
        echo "  ‚ÑπÔ∏è  Les contraintes avanc√©es sont g√©r√©es par Terraform uniquement"
        echo "  üìã V√©rification des ressources Terraform..."
        
        # Afficher le statut des contraintes depuis Terraform
        cd terraform
        terraform output opa_advanced_constraints_status 2>/dev/null || {
            echo "    ‚ö†Ô∏è  Output Terraform non disponible"
        }
        cd ..
    fi
else
    echo -e "${YELLOW}‚ö†Ô∏è R√©pertoire opa/constraints non trouv√©${NC}"
fi

echo "üìã V√©rification du statut des deployments..."
echo -e "${BLUE}√âtat des pods par namespace:${NC}"
for ns in auth vault gitea monitoring logging opa; do
    echo -e "${YELLOW}Namespace $ns:${NC}"
    kubectl get pods -n "$ns" --no-headers 2>/dev/null | head -3 || echo "  Namespace $ns vide ou inexistant"
done

# V√©rification sp√©cifique des contraintes OPA
echo -e "\n${YELLOW}üõ°Ô∏è V√©rification des politiques OPA d√©ploy√©es:${NC}"
echo "  ConstraintTemplates:"
kubectl get constrainttemplate --no-headers 2>/dev/null | awk '{print "    - " $1}' || echo "    Aucun ConstraintTemplate trouv√©"

echo "  Constraints actives:"
kubectl get constraints --all-namespaces --no-headers 2>/dev/null | awk '{print "    - " $2 " (" $1 ")"}' || echo "    Aucune constraint trouv√©e"

echo -e "${GREEN}‚úÖ D√©ploiement termin√© avec succ√®s.${NC}"
echo -e "${YELLOW}üîó Services disponibles:${NC}"
echo "  - Keycloak: http://keycloak.localhost (admin/admin123)"
echo "  - Grafana: http://grafana.localhost (admin/admin123)"
echo "  - Vault: http://vault.localhost"
echo "  - Gitea: http://gitea.localhost"
echo ""
echo -e "${YELLOW}üìã Commandes utiles:${NC}"
echo "  - Valider le d√©ploiement: make validate"
echo "  - Tester les politiques OPA: make validate-opa"
echo "  - Port-forwarding si ingress ne fonctionne pas:"
echo "    kubectl port-forward -n auth svc/keycloak 8080:80"
echo ""
echo -e "${BLUE}üí° Note: Les ingress peuvent prendre quelques minutes √† √™tre disponibles${NC}"
